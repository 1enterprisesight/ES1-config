const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { Config } = require('./models'); // Sequelize Models
const app = express();
const PORT = 5000;

app.use(bodyParser.json());
app.use(cors());

// Route to create new KrakenD configuration
app.post('/config', async (req, res) => {
  try {
    const newConfig = await Config.create(req.body);
    res.json(newConfig);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Route to get all configurations
app.get('/config', async (req, res) => {
  try {
    const configs = await Config.findAll();
    res.json(configs);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Route to generate the KrakenD JSON configuration based on the schema
app.get('/generate-json/:id', async (req, res) => {
  try {
    const config = await Config.findByPk(req.params.id);
    if (!config) {
      return res.status(404).json({ message: 'Configuration not found' });
    }

    // Generate JSON based on KrakenD Schema
    const esgatewayJson = {
      version: config.version,
      endpoints: config.endpoints,
      backend: config.backend
    };

    res.json(esgatewayJson);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

